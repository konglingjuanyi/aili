<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!-- 启用注解配置权限 -->
    <global-method-security secured-annotations="enabled" jsr250-annotations="enabled"/>
	<!--登录页面不过滤 -->
	<http pattern="/framework/login" security="none" />
	<http pattern="/framework/common" security="none" />
	<http pattern="/framework/validateCode" security="none" />
	<http pattern="/framework/timeout" security="none" />
	
	<!-- 静态资源放行 -->
	<!--  <http pattern="/**/*.*" security="none" /> -->
	<!-- <http pattern="/resource/*.*" security="none" />  -->
	<!-- <http pattern="/scripts/*.*" security="none"/>
	<http pattern="/styles/*.*" security="none"/> -->
	<http pattern="/**/*.jpg" security="none" />  
    <http pattern="/**/*.png" security="none" />  
    <http pattern="/**/*.gif" security="none" />  
    <http pattern="/**/*.css" security="none" />  
    <http pattern="/**/*.js" security="none" />  
	
	<http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint">
		<!-- <form-login login-page="/login" always-use-default-target="true" default-target-url="/user/welcome" 
			/> -->
		<logout logout-success-url="/framework/login" />
		<!-- 实现免登陆验证 -->
		<remember-me token-validity-seconds="600"  key="e37f4b31-0n45-11dd-bd0b-0800200c9a11"/>
		<!--访问/admin.jsp资源的用户必须具有ROLE_ADMIN的权限 -->
		<intercept-url pattern="/manager/admin" access="hasRole('ROLE_ADMIN')" />
		<!--访问/**资源的用户必须具有ROLE_USER的权限 -->
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
		<session-management invalid-session-url="/framework/login">
			<concurrency-control max-sessions="1"  error-if-maximum-exceeded="true" />
		</session-management>
		<!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter ref="validateCodeAuthenticationFilter"	before="FORM_LOGIN_FILTER" />
<!-- 		<custom-filter ref="myFilter " before="FILTER_SECURITY_INTERCEPTOR" /> -->
	</http>
	<!-- 处理登录 s -->
	<!-- 未登录的切入点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/framework/login"></beans:property>
	</beans:bean>
	
	<beans:bean id="validateCodeAuthenticationFilter"
		class="org.hbhk.module.framework.server.interceptor.MyUsernamePasswordAuthenticationFilter">
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check"/>
		<beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"/>
		<beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"/>
		<beans:property name="authenticationManager" ref="authenticationManager"/>
		<beans:property name="userCache" ref="userCache"/>
	</beans:bean>

	<beans:bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/framework/welcome"/>
	</beans:bean>

	<beans:bean id="simpleUrlAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/framework/login"/>
	</beans:bean>
	<!-- 处理登录 s -->
	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="myFilter"
		class="org.hbhk.module.framework.server.security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager ">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
		</authentication-provider>
	</authentication-manager>
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期 等 -->
	<beans:bean id="myUserDetailService"
		class="org.hbhk.module.framework.server.security.MyUserDetailService" />
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="org.hbhk.module.framework.server.security.MyAccessDecisionManager">
	</beans:bean>
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"
		class="org.hbhk.module.framework.server.security.MyInvocationSecurityMetadataSource" />
</beans:beans>